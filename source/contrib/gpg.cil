(roleattribute is_gpg_role)
(roleattribute is_gpgagent_role)
(roleattribute is_gpgpcsc_role)
(roleattribute is_scd_role)

(typeattribute is_gpg_subject)
(typeattribute is_gpgagent_subject)
(typeattribute is_gpgpcsc_subject)
(typeattribute is_scd_subject)

(type gpg_exec_t)
(call application_subject_entry (is_gpg_subject gpg_exec_t))

(context file_gpg_exec (system_u object_r gpg_exec_t ((s0)(s0))))
(filecon "/usr/bin/gpg2" file file_gpg_exec)

(type gpg_helper_exec_t)
(call commands_bin_object (gpg_helper_exec_t))

(context file_gpg_helper_exec (system_u object_r gpg_helper_exec_t ((s0)(s0))))
(filecon "/usr/libexec/gpg-check-pattern" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg-preset-passphrase" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg-protect-tool" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg2keys_curl" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg2keys_finger" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg2keys_hkp" file file_gpg_helper_exec)
(filecon "/usr/libexec/gpg2keys_ldap" file file_gpg_helper_exec)

(type gpgagent_exec_t)
(call application_subject_entry (is_gpgagent_subject gpgagent_exec_t))

(context file_gpgagent_exec (system_u object_r gpgagent_exec_t ((s0)(s0))))
(filecon "/usr/bin/gpg-agent" file file_gpgagent_exec)

(type gpgpcsc_exec_t)
(call application_subject_entry (is_gpgpcsc_subject gpgpcsc_exec_t))

(context file_gpgpcsc_exec (system_u object_r gpgpcsc_exec_t ((s0)(s0))))
(filecon "/usr/libexec/gnupg-pcsc-wrapper" file file_gpgpcsc_exec)

(type scd_exec_t)
(call application_subject_entry (is_scd_subject scd_exec_t))

(context file_scd_exec (system_u object_r scd_exec_t ((s0)(s0))))
(filecon "/usr/libexec/scdaemon" file file_scd_exec)

(type gpg_conf_t)
(call files_etc_object (gpg_conf_t))

(context file_gpg_conf (system_u object_r gpg_conf_t ((s0)(s0))))
(filecon "/etc/gnupg(/.*)?" any file_gpg_conf)

(allow is_gpg_subject self (process (signal)))
(allow is_gpg_subject self rw_fifo_file_perms)

(call can_exec (is_gpg_subject gpg_helper_exec_t))

(call system_read_sysctl_crypto_files (is_gpg_subject))

(call devices_read_urandom (is_gpg_subject))
(call devices_read_random (is_gpg_subject))

(call files_dontaudit_list_all (is_gpg_subject)) ; catchall
(call files_audit_access_generic_tmp_dirs (is_gpg_subject))
(call files_read_generic_etc_files (is_gpg_subject)) ; FIXME: /etc/openldap/ldap.conf (for keyserver)
(call files_list_tmp (is_gpg_subject))

(optional gpg_optional_auth
    (call auth_nsswitch_client_subject (is_gpg_subject)))

(optional gpg_optional_http
    (call http_tcp_connect_http_port (is_gpg_subject))) ; keyserver

(optional gpg_optional_miscfiles
    (call miscfiles_read_generic_cert_files (is_gpg_subject))
    (call miscfiles_read_network_config_files (is_gpg_subject))
    (call miscfiles_read_localization_files (is_gpg_subject)))

(optional gpg_optional_usersubject
    (type user_gpg_home_t)
    (call usersubject_home_object (user_gpg_home_t)))

(allow is_gpgagent_subject self create_unix_stream_stream_socket_perms)
(allow is_gpgagent_subject self (unix_stream_socket (connectto)))
(allow is_gpgagent_subject self rw_fifo_file_perms)

(call system_read_sysctl_crypto_files (is_gpgagent_subject))

(call commands_execute_shell_files (is_gpgagent_subject))

(call devices_list (is_gpgagent_subject))

(call files_search_tmp (is_gpgagent_subject))

(optional gpgagent_optional_miscfiles
    (call miscfiles_read_localization_files (is_gpgagent_subject)))

(optional gpgagent_optional_usersubject
    (type user_gpgagent_home_t)
    (call usersubject_home_object (user_gpgagent_home_t)))

(allow is_scd_subject self create_unix_stream_stream_socket_perms)
(allow is_scd_subject self create_netlink_kobject_uevent_socket_perms)
(allow is_scd_subject self rw_fifo_file_perms)

(call system_read_sysctl_crypto_files (is_scd_subject))

(call devices_list (is_scd_subject))
(call devices_list_sysfs (is_scd_subject))
(call devices_read_sysfs_files (is_scd_subject))

(optional scd_optional_miscfiles
    (call miscfiles_read_localization_files (is_scd_subject)))

(optional scd_optional_udevd
    (call udevd_read_config_files (is_scd_subject))
    (call udevd_read_run_files (is_scd_subject)))

(optional scd_optional_usersubject
    (type user_scd_tmp_t)
    (call usersubject_tmp_object (user_scd_tmp_t))
    (type user_scd_home_t)
    (call usersubject_home_object (user_scd_home_t)))

(call files_search_etc (is_gpgpcsc_subject))

(optional gpgpcsc_optional_pcsc
    (call pcsc_stream_connect (is_gpgpcsc_subject)))

(macro gpg_role_template ((role ARG1)(type ARG2)(type ARG3)(type ARG4))
    (roleattributeset is_gpg_role ARG1)
    (typeattributeset is_gpg_subject ARG3)
    (roletype ARG1 ARG3)
    (call subtrans_pattern (ARG2 gpg_exec_t ARG3))
    (allow ARG3 ARG4 manage_dir_perms)
    (allow ARG3 ARG4 manage_file_perms))

(macro gpg_role_template_agent ((role ARG1)(type ARG2)(type ARG3)(type ARG4))
    (roleattributeset is_gpgagent_role ARG1)
    (typeattributeset is_gpgagent_subject ARG3)
    (roletype ARG1 ARG3)
    (call subtrans_pattern (ARG2 gpgagent_exec_t ARG3))
    (allow ARG2 ARG3 (process (sigkill sigstop signal signull)))
    (call ps_subject_pattern (ARG2 ARG3))
    (allow ARG2 ARG4 manage_file_perms)
    (allow ARG2 ARG4 relabel_file_perms)
    (allow ARG2 ARG4 manage_sock_file_perms)
    (allow ARG2 ARG4 relabel_sock_file_perms)
    (allow ARG3 ARG4 manage_file_perms)
    (allow ARG3 ARG4 manage_sock_file_perms))

(macro gpg_role_template_pcsc ((role ARG1)(type ARG2)(type ARG3))
    (roleattributeset is_gpgpcsc_role ARG1)
    (typeattributeset is_gpgpcsc_subject ARG3)
    (roletype ARG1 ARG3)
    (call subtrans_pattern (ARG2 gpgpcsc_exec_t ARG3)))

(macro gpg_role_template_scd ((role ARG1)(type ARG2)(type ARG3)(type ARG4)(type ARG5))
    (roleattributeset is_scd_role ARG1)
    (typeattributeset is_scd_subject ARG3)
    (roletype ARG1 ARG3)
    (call subtrans_pattern (ARG2 scd_exec_t ARG3))
    (allow ARG3 ARG4 manage_dir_perms)
    (allow ARG3 ARG4 manage_sock_file_perms)
    (allow ARG3 ARG5 manage_file_perms)
    (call files_tmp_filetrans (ARG3 ARG4 dir "*")))

(macro gpg_read_config_files ((type ARG1))
    (call files_search_etc (ARG1))
    (call read_files_pattern (ARG1 gpg_conf_t gpg_conf_t)))

(macro gpg_read_state_all_gpgpcsc ((type ARG1))
    (allow ARG1 is_gpgpcsc_subject (dirs (list)))
    (allow ARG1 is_gpgpcsc_subject read_file_perms))
